<?php

namespace Drupal\paypal_payments\Form;

use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\EntityFieldManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\node\Entity\Node;
use Drupal\paypal_payments\Services\paypalPaymentsEntitySave;
use Drupal\paypal_payments\Services\paypalSettings;
use PayPal\Api\Amount;
use PayPal\Api\Details;
use PayPal\Api\Item;
use PayPal\Api\ItemList;
use PayPal\Api\Payer;
use PayPal\Api\Payment;
use PayPal\Api\RedirectUrls;
use PayPal\Api\Transaction;
use PayPal\Auth\OAuthTokenCredential;
use PayPal\Rest\ApiContext;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * Form controller for Paypal edit forms.
 *
 * @ingroup paypal_payments
 */
class PaypalForm extends ContentEntityForm {

  /**
   * @var \Drupal\Core\Entity\EntityRepositoryInterface
   */
  private $entity_repository;

  /**
   * @var \Drupal\paypal_payments\Services\paypalSettings
   */
  private $paypal_settings;

  /**
   * @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface
   */
  private $entity_type_bundle_info;

  /**
   * @var \Drupal\node\Entity\Node
   */
  private $node;

  /**
   * @var \Drupal\paypal_payments\Services\paypalPaymentsEntitySave
   */
  private $paypal_payments_entity_save;

  /**
   * @var \Drupal\Core\Entity\EntityFieldManager
   */
  private $entity_field_manager; #TODO:: use this service to do some more stuff

  public function __construct(\Drupal\Core\Entity\EntityRepositoryInterface $entity_repository, paypalSettings $paypal_settings, EntityFieldManager $entity_field_manager,\Drupal\Core\Entity\EntityTypeBundleInfoInterface $entity_type_bundle_info = NULL, \Drupal\Component\Datetime\TimeInterface $time = NULL) {
    parent::__construct($entity_repository, $entity_type_bundle_info, $time);
    $this->entity_repository = $entity_repository;
    $this->paypal_settings = $paypal_settings;
    $this->entity_type_bundle_info = $entity_type_bundle_info;
    #$this->time = $time;
    #$this->paypal_payments_entity_save = $paypal_payments_entity_save;
    $this->entity_field_manager = $entity_field_manager;
  }

  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('entity.manager'),
      $container->get('paypal_payments.settings'),
      $container->get('entity_field.manager')
      #$container->get('paypal_payments.paypal_entity_save')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    /* @var $entity \Drupal\paypal_payments\Entity\Paypal */
    $form = parent::buildForm($form, $form_state);

    //dd($this->getTheNode()->id());

    $price = $this->getPrice($this->getPaypalFieldItem());
    $form['price']['widget'][0]['value']['#default_value'] = $price;
    $form['actions']['submit']['#value'] = $this->t('Pay with PayPal');

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {


    #\Drupal::messenger()->addMessage($this->t('Paid the Price of %value USD to node .', [
      #'%value' => $price,
    #]));

    return parent::validateForm($form, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

    //parent::submitForm($form, $form_state); // TODO: Change the autogenerated stub
    //$value = $form_state->getValue('price');
    //$price = $this->getPrice($value);
    $price = $this->getPrice($this->getPaypalFieldItem());
    //dd($price);
    $currency = $this->paypal_settings->getSetStoreCurrency();
    if (!$price) {
      die('Price not set');

    }

    $this->paypalRequest($price, $currency, $form_state);
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state) {
    $entity = $this->entity;

    $status = parent::save($form, $form_state);

    /** @var  $node */
    #TODO:: set somestuff before saving to the table
    #$node = \Drupal::routeMatch()->getParameter('node');
    #$sku = $this->generateSkuFromNodeTitle($node);
    #$form_state->setValue('sku', $sku);
    #$form_state->setValue('payment_status', 'Success');

    #$form_state->getValue('payment_status');
    #$form_state->getValue('sku');

    //dd($form_state->getValue('payment_status'). ' | '. $form_state->getValue('sku'));


    /**
    $status = parent::save($form, $form_state);

    switch ($status) {
      case SAVED_NEW:
        drupal_set_message($this->t('Created the %label Paypal.', [
          '%label' => $entity->label(),
        ]));
        break;

      default:
        \Drupal::messenger()->addMessage($this->t('Saved the %label Paypal.', [
          '%label' => $entity->label(),
        ]));
    }
    */
    $form_state->setRedirect('entity.paypal.canonical', ['paypal' => $entity->id()]);
  }

  protected function paypalRequest($itemPrice, $currency, FormStateInterface $form_state){
    /**
     * Paypal request , should be initiated on form validation
     */
    $node = \Drupal::routeMatch()->getParameter('node');

    $current_path = $this->getRequest()->getSchemeAndHttpHost().$this->getRequest()->getBaseUrl().$this->getRequest()->getPathInfo();

    $environment = $this->paypal_settings->getSetEnvironment();
    $clientID = $this->paypal_settings->getClientId();
    $clientSecret = $this->paypal_settings->getClientSecret();
    //dd($clientID . ' | ' . $clientSecret);

    $request = \Drupal::request();
    $baseUrl = $request->getHost();

    $paypal = new ApiContext(
      new OAuthTokenCredential(
        $clientID,
        $clientSecret
      )
    );

    $paypal->setConfig(
      ['mode' => $environment]
    );

    /**
     * Get the total Amount
     *
     */
    $sku = $this->generateSkuFromNodeTitle();
    $product = $sku; #make SKU
    $price = (float)$itemPrice;
    $shipping = 5.00;

    $total = $price + $shipping;

    $payer = new Payer();
    $payer->setPaymentMethod('paypal');

    $item = new Item();
    $item->setName($product)
      ->setCurrency($currency)#make dynamic from store configs
      ->setQuantity(1)
      ->setPrice($price);

    $itemList = new ItemList();
    $itemList->setItems([$item]);

    $details = new Details();
    $details->setShipping($shipping)
      #->setTax(2.00)
      ->setSubtotal($price);

    $amount = new Amount();
    $amount->setCurrency($currency)#TODO: Import this from currency
      ->setTotal($total)
      ->setDetails($details);

    $transaction = new Transaction();
    $transaction->setAmount($amount)
      ->setItemList($itemList)
      ->setDescription($sku)
      ->setInvoiceNumber(uniqid($sku));

    $redirectUrls = new RedirectUrls();
    $redirectUrls->setReturnUrl($current_path . '/?success=true')
      ->setCancelUrl($current_path. '/?success=false');

    $payment = new Payment();
    $payment->setIntent('sale')
      ->setPayer($payer)
      ->setRedirectUrls($redirectUrls)
      ->setTransactions([$transaction]);

    try{
      $payment->create($paypal); #Create payment Else throw ERROR
    } catch (Exception $exception) {
      die($exception);
    }

    $approvalUlr = $payment->getApprovalLink() ;#The token redirection to PP
    $response = new TrustedRedirectResponse($approvalUlr);
    $form_state->setResponse($response);

  }


  /**
   * The base url to be appended to paypal redirectUrls
   * @return string
   */
  protected function getBaseUrl(){
    $request = \Drupal::request();
    if ($request->getMethod() == 'GET') {
     $baseUrl = $request->getHost();

      return $baseUrl;
    }
  }

  /**
   * Checks if the node viewed has paypal field item
   * defined called in getPrice.
   */
  public function getPaypalFieldItem(){

    /**
     * Load price from our PaypalItem fieldItem specific to each node
     * In our Paypal Entity form , in node field definitions
     *
     * @var \Drupal\node\Entity\Node $node
     */
    #$node = \Drupal::routeMatch()->getParameter('node');
    $node = $this->getTheNode();
    $bundle = $node->bundle();

    //$field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $bundle);
    $field_definitions = $this->entity_field_manager->getFieldDefinitions('node', $bundle);

    foreach ($field_definitions as $key => $field) {
      if ($field->getType() == 'field_paypal') {
        $field_label = $field->getName();
        $paypalPrice = $node->get($field_label)->getValue();
      }
    }
    return $paypalPrice;
  }

  public function getTheNode(){
    /**
     * Load price from our PaypalItem fieldItem specific to each node
     * In our Paypal Entity form , in node field definitions
     *
     * @var \Drupal\node\Entity\Node $node
     */
    $node = \Drupal::routeMatch()->getParameter('node');

    return $node;
  }

  /**
   * Auto-generate sku from node title
   */
  public function generateSkuFromNodeTitle(){
    //$title = $node->getTitle();
    $title = $this->getTheNode()->getTitle();
    //Trim to like 6 words (15 characters)
    $sku = substr($title, 0 , 15);

    return $sku;
  }

  /**
   * Get the price amount in relation to paypalField Item
   *
   * @param $paypalPrice
   *
   */
  public function getPrice($paypalPrice){
    foreach ($paypalPrice as $item => $value) {
      $price = $value['value'];

      return $price;
    }
  }

}
