<?php

namespace Drupal\paypal_payments\Form;

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paypal_payments\Services\paypalSettings;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Class PayPalPaymentsSettingsForm.
 *
 * Store the paypal credentials required to make the api calls
 */
class PayPalPaymentsSettingsForm extends FormBase {

  /**
   * @var \Drupal\paypal_payments\Services\paypalSettings
   */
  private $paypal_settings;

  public function __construct(paypalSettings $paypal_settings) {
    $this->paypal_settings = $paypal_settings;
  }


  public static function create(ContainerInterface $container) {
    //return parent::create($container); // TODO: Change the autogenerated stub
    return new static(
      // Load our paypal_payments_settings.
      $container->get('paypal_payments.settings')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'paypal_payments_settings_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $environmentTypes = [
      'live' => 'Live',
      'sandbox' => 'Sandbox',
    ];

    $form['client_id'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Client ID'),
      '#description' => $this->t('The Client ID from PayPal'),
      '#maxlength' => 128,
      '#size' => 64,
      '#weight' => '0',
    ];
    $form['client_secret'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Client Secret'),
      '#description' => $this->t('The Client Secret Key From PayPal'),
      '#maxlength' => 128,
      '#size' => 64,
      '#weight' => '0',
    ];
    $form['environment'] = [
      '#type' => 'checkboxes',
      '#title' => $this->t('Environment'),
      '#options' => $environmentTypes,
      //'#default_value' => $environmentTypes['sandbox'],
      '#description' => $this->t('Select either; live or sandbox(for development)'),
      '#weight' => '0',
    ];
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    parent::validateForm($form, $form_state);
    //TODO:: check if the keys are valid
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

    $this->paypal_settings->setPaypalCredentials($form_state);

  }

}
